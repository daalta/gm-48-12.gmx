<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oDynamic</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>oPlayer</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation variables
walkSpeed=7;
xscale=1; //Spieler guckt zu anfang nach rechts.
image_index=0;
fallingRotateSpeed=20//-Grad Rotation pro Frame wäghrend falling-State

imageRotation = 0;

animationTimer = 0; // Timer for animation

lastDir = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation frames


//Idle: standing still
idleFirstFrame=0;
idleLastFrame=2;

//Moving: Walking left or right
movingFirstFrame=3;
movingLastFrame=10;

//Dead by Ceiling
deadCeilingFirstFrame=11;
deadCeilingLastFrame=15;


//Falling: Not colliding with any ground currently
fallingFirstFrame=2;
fallingLastFrame=2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///unused
//game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get movement keys

//move gibt an, ob sich der Spieler nach links oder rechts bewegen soll.
//-1    links
//0     bleib stehen
//1     rechts
move = 0;
if(state &lt; dead) {
    //Testenchecks bewegung
    if (keyboard_check(KEYLEFT))
    {
        if state==idle state=moving;
        move--;
    }
    
    if (keyboard_check(KEYRIGHT))
    {
        if state==idle state=moving;
        move++;
    }
    
    if move==0&amp;&amp;state==moving state=idle //wenn wir uns nicht bewegen, idle state!
}
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check platforms below.
//Gamemaker only return 1 object it collides with.
//We need to make sure it tells us if we are colliding with a jump platform.

if(state &lt; dead &amp;&amp; keyboard_check_pressed(KEYLAUNCH))
{
    //show_debug_message("SPACE PRESSED");
    leftCollision=collision_point(bbox_left,bbox_bottom+1,oPlatformJump,0,0);
    rightCollision=collision_point(bbox_right,bbox_bottom+1,oPlatformJump,0,0);
    if(rightCollision!=noone)
    {
        rightCollision.hp--;
        global.lunch=true;
        shakeScreen(30,1,2);
    }
    else if (leftCollision!=noone)
    {
        leftCollision.hp--;
        global.lunch=true;
        shakeScreen(30,1,2);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move

//Distanz, die der Spieler sich bewegen würde.
hsp=(walkSpeed*move)


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tod
if(state == deadCorpse) {
    image_speed=1;
    animationTimer--;
    if(animationTimer &lt;= 0) {
        instance_create(x, y, oRespawnAnimation);
        audio_play_sound(explosionselbst, 0, 0);
        instance_destroy();
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///spin if going to next level! and go to next level.

if(goingToNextLevel)
{   
    if(y&lt;=-700)room_goto_next();
    image_angle+=15;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oNextTutorial">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.playerWon&amp;&amp;other.touchedByPlayerDuration&gt;=other.nextLevelRequiredDuration)
{
vsp=-50;
goingToNextLevel=true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation
 
if(move!=0)
{
    xscale=move;  
}
if(state != falling &amp;&amp; move != 0) {
    lastDir = move;
}
 
switch(state)
{  
    case idle:
        firstFrame=idleFirstFrame;
        lastFrame=idleLastFrame;
        image_speed=0.05;
        imageRotation =0;
        break;
    case moving:
        firstFrame=movingFirstFrame;
        lastFrame=movingLastFrame;
        image_speed=0.5;
        imageRotation =0;
        break;
    case falling:
        firstFrame=fallingFirstFrame;
        lastFrame=fallingLastFrame;
        image_speed=0.25;
        if(lastDir &gt;=0) {
            imageRotation -=fallingRotateSpeed;
        } else {
            imageRotation +=fallingRotateSpeed;
        }
        break;    
    case dead:
    case deadEnemy:
    case deadCeiling:
        firstFrame=deadCeilingFirstFrame;
        lastFrame=deadCeilingLastFrame;
        image_speed=0.25;
        imageRotation=0;
        break;
    case deadCorpse:
        firstFrame=deadCeilingLastFrame;
        lastFrame=deadCeilingLastFrame;
        image_speed=0;
        imageRotation=0;
        image_index=firstFrame;
        break;
}
 

//if(lastFrame + 1 &lt;= image_index)
if(image_index &gt; lastFrame + 1 || image_index == 0) 
{
    //if(state == dead || state == deadCeilin
    if(state &gt;= dead &amp;&amp; state != deadCorpse) {
        //dead body animation ends
        state = deadCorpse;
        animationTimer = 60;
        image_index = lastFrame;
    } else {
        image_index = firstFrame;
    }
}

//Loope nur die Bilder, die von firstFrame zu lastFrame reichen
if(image_index &lt; firstFrame) {
    image_index = firstFrame;
    if(state&gt;=dead)
    {
        audio_play_sound(sound9, 0, 0);
    }
}

//show_debug_message("state: " + string(state));
draw_sprite_ext(sprite_index,image_index,x,y,xscale,1,imageRotation,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
